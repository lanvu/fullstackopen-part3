{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Input","label","value","onChange","PersonForm","onSubmit","valueName","onNameChange","valueNumber","onNumberChange","type","Person","name","number","handleClick","onClick","Persons","persons","map","person","key","Notification","status","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newSearch","setNewSearch","notification","setNotification","resetNotification","setTimeout","getAllPersons","personService","initialPersons","addPerson","event","a","preventDefault","savedPersons","find","changedPerson","window","confirm","catch","error","returnedPerson","concat","personsToShow","filter","toLowerCase","includes","useEffect","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.4c63d37b.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteOne = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteOne }\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './App.css'\n\nconst Input = ({ label, value, onChange }) => {\n  return (\n    <div>\n      {label} <input value={value} onChange={onChange} />\n    </div>\n  )\n}\n\nconst PersonForm = ({\n  onSubmit,\n  valueName,\n  onNameChange,\n  valueNumber,\n  onNumberChange\n}) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <Input label={'name:'} value={valueName} onChange={onNameChange} />\n      <Input label={'number:'} value={valueNumber} onChange={onNumberChange} />\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Person = ({ id, name, number, handleClick }) => {\n  return (\n    <p>\n      {name} {number}\n      <button onClick={() => handleClick(id, name)}>delete</button>\n    </p>\n  )\n}\n\nconst Persons = ({ persons, handleClick }) => {\n  return (\n    <>\n      {persons.map(person => (\n        <Person key={person.id} {...person} handleClick={handleClick} />\n      ))}\n    </>\n  )\n}\n\nconst Notification = ({ status, message }) => {\n  if (status === null) {\n    return null\n  } else if (status === 'error') {\n    return <div className=\"error\">{message}</div>\n  } else {\n    return <div className=\"success\">{message}</div>\n  }\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newSearch, setNewSearch] = useState('')\n  const [notification, setNotification] = useState({\n    status: null,\n    message: ''\n  })\n\n  const resetNotification = () => {\n    setTimeout(() => {\n      setNotification({\n        status: null,\n        message: ''\n      })\n    }, 5000)\n  }\n\n  const getAllPersons = () => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }\n\n  const addPerson = async event => {\n    event.preventDefault()\n    const savedPersons = await personService.getAll()\n    const person = savedPersons.find(person => person.name === newName)\n\n    if (person) {\n      const changedPerson = { ...person, number: newNumber }\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        personService\n          .update(person.id, changedPerson)\n          .then(() => {\n            getAllPersons()\n            setNotification({\n              status: 'success',\n              message: `Updated ${person.name}`\n            })\n            resetNotification()\n          })\n          .catch(error => {\n            setNotification({\n              status: 'error',\n              message: error.response.data.error\n            })\n            resetNotification()\n            getAllPersons()\n          })\n      }\n    } else {\n      personService\n        .create({ name: newName, number: newNumber })\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNotification({\n            status: 'success',\n            message: `Added ${returnedPerson.name}`\n          })\n          resetNotification()\n        })\n        .catch(error => {\n          setNotification({\n            status: 'error',\n            message: error.response.data.error\n          })\n          resetNotification()\n        })\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name} ?`)) {\n      personService.deleteOne(id).then(() => {\n        getAllPersons()\n        setNotification({\n          status: 'success',\n          message: `Deleted ${name}`\n        })\n        resetNotification()\n      })\n    }\n  }\n\n  const handleNameChange = event => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = event => {\n    setNewSearch(event.target.value)\n  }\n\n  const personsToShow = persons.filter(person =>\n    person.name.toLowerCase().includes(newSearch.toLowerCase())\n  )\n\n  useEffect(() => {\n    getAllPersons()\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification {...notification} />\n\n      <Input\n        label={'filter shown with:'}\n        value={newSearch}\n        onChange={handleSearchChange}\n      />\n\n      <h3>add a new</h3>\n      <PersonForm\n        onSubmit={addPerson}\n        valueName={newName}\n        onNameChange={handleNameChange}\n        valueNumber={newNumber}\n        onNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n      <Persons persons={personsToShow} handleClick={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}